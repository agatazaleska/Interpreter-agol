-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Agol.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Agol.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Agol.Abs.Ident -> Result
transIdent x = case x of
  Agol.Abs.Ident string -> failure x

transProgram :: Show a => Agol.Abs.Program' a -> Result
transProgram x = case x of
  Agol.Abs.ProgramR _ stmts -> failure x

transArg :: Show a => Agol.Abs.Arg' a -> Result
transArg x = case x of
  Agol.Abs.ArgR _ type_ ident -> failure x

transBlock :: Show a => Agol.Abs.Block' a -> Result
transBlock x = case x of
  Agol.Abs.BlockR _ stmts -> failure x

transStmt :: Show a => Agol.Abs.Stmt' a -> Result
transStmt x = case x of
  Agol.Abs.Decl _ type_ items -> failure x
  Agol.Abs.While _ expr block -> failure x
  Agol.Abs.Cond _ expr block -> failure x
  Agol.Abs.CondElse _ expr block1 block2 -> failure x
  Agol.Abs.FnDef _ ident args type_ block -> failure x
  Agol.Abs.Ass _ ident expr -> failure x
  Agol.Abs.SExpr _ expr -> failure x
  Agol.Abs.Break _ -> failure x
  Agol.Abs.Continue _ -> failure x
  Agol.Abs.Ret _ expr -> failure x
  Agol.Abs.Print _ exprs -> failure x
  Agol.Abs.Append _ ident expr -> failure x
  Agol.Abs.Put _ ident expr1 expr2 -> failure x

transItem :: Show a => Agol.Abs.Item' a -> Result
transItem x = case x of
  Agol.Abs.NoInit _ ident -> failure x
  Agol.Abs.Init _ ident expr -> failure x

transType :: Show a => Agol.Abs.Type' a -> Result
transType x = case x of
  Agol.Abs.Int _ -> failure x
  Agol.Abs.Str _ -> failure x
  Agol.Abs.Bool _ -> failure x
  Agol.Abs.List _ type_ -> failure x

transExpr :: Show a => Agol.Abs.Expr' a -> Result
transExpr x = case x of
  Agol.Abs.EVar _ ident -> failure x
  Agol.Abs.ERef _ ident -> failure x
  Agol.Abs.ELitInt _ integer -> failure x
  Agol.Abs.ELitTrue _ -> failure x
  Agol.Abs.ELitFalse _ -> failure x
  Agol.Abs.EApp _ ident exprs -> failure x
  Agol.Abs.EString _ string -> failure x
  Agol.Abs.EList _ exprs -> failure x
  Agol.Abs.Get _ ident expr -> failure x
  Agol.Abs.Neg _ expr -> failure x
  Agol.Abs.Not _ expr -> failure x
  Agol.Abs.EMul _ expr1 mulop expr2 -> failure x
  Agol.Abs.EAdd _ expr1 addop expr2 -> failure x
  Agol.Abs.ERel _ expr1 relop expr2 -> failure x
  Agol.Abs.EAnd _ expr1 expr2 -> failure x
  Agol.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Agol.Abs.AddOp' a -> Result
transAddOp x = case x of
  Agol.Abs.Plus _ -> failure x
  Agol.Abs.Minus _ -> failure x

transMulOp :: Show a => Agol.Abs.MulOp' a -> Result
transMulOp x = case x of
  Agol.Abs.Times _ -> failure x
  Agol.Abs.Div _ -> failure x
  Agol.Abs.Mod _ -> failure x

transRelOp :: Show a => Agol.Abs.RelOp' a -> Result
transRelOp x = case x of
  Agol.Abs.LTH _ -> failure x
  Agol.Abs.LE _ -> failure x
  Agol.Abs.GTH _ -> failure x
  Agol.Abs.GE _ -> failure x
  Agol.Abs.EQU _ -> failure x
  Agol.Abs.NE _ -> failure x
