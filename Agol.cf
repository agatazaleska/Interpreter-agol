-- programs ------------------------------------------------

entrypoints Program ;

ProgramR.   Program ::= [Stmt] ;

ArgR. 	    Arg ::= Type Ident ;

separator   Arg "," ;


-- statements ------------------------------------------------

BlockR.     Block ::= "{" [Stmt] "}" ;

separator   Stmt "" ;

Decl.       Stmt ::= Type [Item] ";" ;

NoInit.     Item ::= Ident ; 

Init.       Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

While.      Stmt ::= "while" "(" Expr ")" Block ;

Cond.       Stmt ::= "if" "(" Expr ")" Block  ;

CondElse.   Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

FnDef.      Stmt ::= "fun" Ident "(" [Arg] ")" ":" Type  Block ;

Ass.        Stmt ::= Ident "=" Expr  ";" ;

SExpr.      Stmt ::= Expr ";" ;

Break.      Stmt ::= "break" ";" ;

Continue.   Stmt ::= "continue" ";" ;

Ret.        Stmt ::= "return" Expr ";" ;

Print.      Stmt ::= "print" "(" [Expr] ")" ";" ;

Append.     Stmt ::= Ident ".append" "(" Expr ")" ";" ;

Put.        Stmt ::= Ident ".put" "(" Expr "," Expr ")" ";" ;


-- types ------------------------------------------------

Int.        Type ::= "int" ;

Str.        Type ::= "string" ;

Bool.       Type ::= "boolean" ;

List.       Type ::= "list" "<" Type ">" ;


-- expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ERef.      Expr6 ::= "&" Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

EList.     Expr6 ::= "[" [Expr] "]" ;

Get.       Expr6 ::= Ident ".get" "(" Expr ")" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;


--- Operators ---

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;


-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;
